| Component                | Implementation Goal                                           | Description                                                                                                          |
|--------------------------|---------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------|
| Layer 1: Signal Detection| Map raw percepts → internal tokens + bio modulation           | Read `VisionFeed.get_percept()` and audio buffer, tokenize into feature vectors; modulate input strength by `BioState`. |
| Layer 2: Feature Association | Associate tokens with recent memory snippets               | Implement a lightweight similarity check (e.g. cosine) between current tokens and `MemoryBank` vectors; apply Hebbian updates. |
| Layer 3: Sequence Patterning | Detect and predict familiar sequences                      | Track short input sequences, flag unresolved divergences, and seed next-token expectations without heavy models.     |
| Layer 4: Abstract Mapping | Build cross-modal links and metaphors                        | Combine signals (e.g. color+sound+motion) with bio-salience to form higher-level associations (e.g. “fire” → “danger”). |
| Layer 5: Narrative Construction | Construct simple cause–effect storylets                  | Chain events into mini-narratives when novelty or conflict arises; store unresolved threads for dream seeding.       |
| Layer 6: Emergent Logic   | Generate internal hypotheses & dream states                  | Blend narratives & metaphors to form “what-if” constructs; expose API for toggling dream mode in `ElarinCore`.       |
| BioState Module           | Heart & breath monitoring + visual/audio feedback            | Encapsulate in a `BioState` class (e.g. `pulse_rate`, `breath_rate`, `salience`); drive heart/lung icons and breath sounds. |
| Salience Filtering        | Gate layer inputs based on current bio-salience              | Compute a salience score in `BioState.update()`, suppress or boost signals entering Layers 2–5 when thresholds crossed. |
| System Orchestration      | Integrate layers, bio feedback & memory in `ElarinCore.run()`| Wire up `process_input` → six layers → output; call `BioState.update()`, record to `MemoryBank`, render heart/breath overlays. |
